[
  {
    "title": "Mandelbrot Set",
    "icon": "mandelbrot.png",
    "description": "Function of the Mandelbrot Set",
    "data": {
      "function": {
        "type": "expr",
        "value": "mandelbrot(z, p)"
      },
      "mandelinit": {
        "type": "expr",
        "value": "0"
      }
    }
  },
  {
    "title": "Burning Ship",
    "icon": "burningship.png",
    "description": "Function of the Mandelbrot Set using the absolute Value",
    "data": {
      "function": {
        "type": "expr",
        "value": "mandelbrot(abs z, p)"
      },
      "mandelinit": {
        "type": "expr",
        "value": "0"
      }
    }
  },
  {
    "title": "Wikipedia-Mandelbrot-Set",
    "icon": "wiki.png",
    "description": "Settings as they are used in Wikipedia",
    "data": {
      "bailoutvalue": {
        "type": "expr",
        "value": "i + smooth_i"
      },
      "bailouttransfer": {
        "type": "expr",
        "value": "log(1 + value * (0.42 / 28))"
      },
      "laketransfer": {
        "type": "expr",
        "value": "0"
      },
      "lakepalette": {
        "type": "palette",
        "value": "0xff000000"
      },
      "bailoutpalette": {
        "type": "palette",
        "value": [
          [
            "0xff000764",
            "0xff206bcb",
            "0xffedffff",
            "0xffffaa00",
            "0xff310231"
          ]
        ]
      }
    }
  },
  {
    "title": "Celtic",
    "icon": "celtic.png",
    "description": "Celtic Fractal",
    "data": {
      "function": {
        "type": "expr",
        "value": "rabs sqr z + p"
      },
      "mandelinit": {
        "type": "expr",
        "value": "0"
      }
    }
  },
  {
    "title": "Tricorn",
    "icon": "tricorn.png",
    "description": "Tricorn Fractal",
    "data": {
      "function": {
        "type": "expr",
        "value": "mandelbrot(conj z, p)"
      },
      "mandelinit": {
        "type": "expr",
        "value": "0"
      }
    }
  },
  {
    "title": "Buffalo",
    "icon": "buffalo.png",
    "description": "Buffalo Fractal",
    "data": {
      "function": {
        "type": "expr",
        "value": "abs sqr z + p"
      },
      "mandelinit": {
        "type": "expr",
        "value": "0"
      }
    }
  },
  {
    "title": "Perpendicular Mandelbrot",
    "icon": "perpendicular_mandelbrot.png",
    "description": "Perpendicular Mandelbrot Fractal",
    "data": {
      "function": {
        "type": "expr",
        "value": "mandelbrot(conj rabs z, p)"
      },
      "mandelinit": {
        "type": "expr",
        "value": "0"
      }
    }
  },
  {
    "title": "Perpendicular Burning Ship",
    "icon": "perpendicular_burningship.png",
    "description": "Perpendicular Burning Ship Fractal",
    "data": {
      "function": {
        "type": "expr",
        "value": "mandelbrot(iabs z, p)"
      },
      "mandelinit": {
        "type": "expr",
        "value": "0"
      }
    }
  },
  {
    "title": "Perpendicular Celtic",
    "icon": "perpendicular_celtic.png",
    "description": "Perpendicular Celtic Fractal",
    "data": {
      "function": {
        "type": "expr",
        "value": "conj rabs sqr z + p"
      },
      "mandelinit": {
        "type": "expr",
        "value": "0"
      }
    }
  },
  {
    "title": "Perpendicular Buffalo",
    "icon": "perpendicular_buffalo.png",
    "description": "Perpendicular Buffalo Fractal",
    "data": {
      "function": {
        "type": "expr",
        "value": "rabs sqr iabs z + p"
      },
      "mandelinit": {
        "type": "expr",
        "value": "0"
      }
    }
  },
  {
    "title": "Mandel^3",
    "icon": "mandel3.png",
    "description": "Mandelbrot Set to the power of 3",
    "data": {
      "function": {
        "type": "expr",
        "value": "z^3 + p"
      },
      "max_power": {
        "type": "real",
        "value": "3"
      },
      "mandelinit": {
        "type": "expr",
        "value": "0"
      }
    }
  },
  {
    "title": "Mandel^4",
    "icon": "mandel4.png",
    "description": "Mandelbrot Set to the power of 4",
    "data": {
      "function": {
        "type": "expr",
        "value": "z^4 + p"
      },
      "max_power": {
        "type": "real",
        "value": "4"
      },
      "mandelinit": {
        "type": "expr",
        "value": "0"
      }
    }
  },
  {
    "title": "Lambda",
    "icon": "lambda.png",
    "description": "Lambda Fractal",
    "data": {
      "function": {
        "type": "expr",
        "value": "p (1 - z) z"
      },
      "mandelinit": {
        "type": "expr",
        "value": "0.5"
      }
    }
  },
  {
    "title": "Generic Lambda",
    "icon": "generic_lambda.png",
    "description": "Lambda Fractal with parameterized maximum power",
    "data": {
      "function": {
        "type": "expr",
        "value": "p (1 - z^(max_power - 1)) z"
      },
      "max_power": {
        "type": "real",
        "value": "4"
      },
      "mandelinit": {
        "type": "expr",
        "value": "/max_power ^ /(max_power - 1)"
      }
    }
  },
  {
    "title": "Simonbrot Normal",
    "icon": "simonbrot_normal.png",
    "description": "Simonbrot Fractal, a combination of Mandelbrot and Burning Ship",
    "data": {
      "function": {
        "type": "expr",
        "value": "sqr z abs z + p"
      },
      "max_power": {
        "type": "real",
        "value": "4"
      },
      "mandelinit": {
        "type": "expr",
        "value": "0"
      }
    }
  },
  {
    "title": "Simonbrot Inverted",
    "icon": "simonbrot_inverted.png",
    "description": "Simonbrot with abs/sqr exchanged",
    "data": {
      "function": {
        "type": "expr",
        "value": "{ var t = sqr z; t * abs t } + p"
      },
      "max_power": {
        "type": "real",
        "value": "4"
      },
      "mandelinit": {
        "type": "expr",
        "value": "0"
      }
    }
  },
  {
    "title": "Phoenix Julia Set",
    "icon": "phoenix.png",
    "description": "Julia Set of the Phoenix Fractal",
    "data": {
      "function": {
        "type": "expr",
        "value": "mandelbrot(z, p.x) + zlast p.y"
      },
      "mandelinit": {
        "type": "expr",
        "value": "c"
      },
      "juliaset": {
        "type": "bool",
        "value": "true"
      },
      "juliapoint": {
        "type": "cplx",
        "value": "0.5666:-0.5"
      }
    }
  },
  {
    "title": "Cczcpaczcp",
    "icon": "ccz-2.png",
    "description": "Special formula by Mark R Eggleston",
    "data": {
      "function": {
        "type": "expr",
        "value": "p (alpha * z^beta + gamma * z^delta)"
      },
      "mandelinit": {
        "type": "expr",
        "value": "(-gamma delta / alpha beta)^/(beta - delta)"
      },
      "max_power": {
        "type": "real",
        "value": "3"
      },
      "alpha": {
        "type": "expr",
        "value": "1"
      },
      "beta": {
        "type": "expr",
        "value": "3"
      },
      "gamma": {
        "type": "expr",
        "value": "1"
      },
      "delta": {
        "type": "expr",
        "value": "-1"
      }
    }
  },
  {
    "title": "Glynn",
    "icon": "glynn.png",
    "description": "Glynn Fractal (Julia Set of z^1.75 + p)",
    "data": {
      "function": {
        "type": "expr",
        "value": "z ^ 1.75 + p"
      },
      "mandelinit": {
        "type": "expr",
        "value": "0"
      },
      "max_power": {
        "type": "real",
        "value": "1.75"
      },
      "juliaset": {
        "type": "bool",
        "value": "true"
      },
      "juliapoint": {
        "type": "cplx",
        "value": "-0.4"
      }
    }
  },
  {
    "title": "Magnet1",
    "icon": "magnet1.png",
    "description": "Magnet 1 Fractal",
    "data": {
      "function": {
        "type": "expr",
        "value": "sqr((sqr z + p - 1) / (2 z + p - 2))"
      },
      "mandelinit": {
        "type": "expr",
        "value": "0"
      }
    }
  },
  {
    "title": "Magnet2",
    "icon": "magnet2.png",
    "description": "Magnet 2 Fractal",
    "data": {
      "function": {
        "type": "expr",
        "value": "sqr((z^3 + 3(p - 1)z + (p - 1)(p - 2)) / (3 sqr z + 3(p - 2)z + (p - 1)(p - 2) + 1))"
      },
      "mandelinit": {
        "type": "expr",
        "value": "0"
      },
      "max_power": {
        "type": "real",
        "value": "4"
      }
    }
  },
  {
    "title": "Mandelbrot Newton",
    "icon": "mandelnewton.png",
    "description": "Mix of Newton Set and Mandelbrot Formula",
    "data": {
      "function": {
        "type": "expr",
        "value": "sqr newton(z^3 + p, z) + p"
      },
      "mandelinit": {
        "type": "expr",
        "value": "c"
      }
    }
  },
  {
    "title": "SinhZ",
    "icon": "sinhz.png",
    "description": "Mandelbrot Set using the Sine Hyperbolicus (non-polynomial function)",
    "data": {
      "function": {
        "type": "expr",
        "value": "sinh z * p"
      },
      "mandelinit": {
        "type": "expr",
        "value": "I"
      },
      "bailout": {
        "type": "real",
        "value": "32"
      }
    }
  },
  {
    "title": "CoshZ",
    "icon": "coshz.png",
    "description": "Mandelbrot Set using the Cosine Hyperbolicus (non-polynomial function)",
    "data": {
      "function": {
        "type": "expr",
        "value": "cosh z * p"
      },
      "mandelinit": {
        "type": "expr",
        "value": "0"
      },
      "bailout": {
        "type": "real",
        "value": "32"
      }
    }
  },
      {
      "title": "Inverse Mandel^3",
      "icon": "recipmandel3.png",
      "description": "Fractal of z^-3 + p (lake only)",
      "data": {
      "Scale": {
          "type": "scale",
          "value": ["2", "0", "0", "2", "-1.5", "0"]
      },
      "function": {
      "type": "expr",
      "value": "z^-3 + p"
      },
      "mandelinit"
      : {
      "type": "expr",
      "value": "c"
      }
      }
      },
      {
      "title": "Duck Fractal",
      "icon": "duck.png",
      "description": "Fractal of a logarithmic function",
      "data": {
      "Scale": {
          "type": "scale",
          "value": ["2", "0", "0", "2", "-1.5", "0"]
      },
      "function": {
      "type": "expr",
      "value": "log(iabs z + p)"
      },
      "mandelinit"
      : {
      "type": "expr",
      "value": "c"
      }
      }
      },
      {
      "title": "Newton Set of Power 3",
      "icon": "newton3.png",
      "description": "Newton Set of z^3 + p",
      "data": {
      "function": {
      "type": "expr",
      "value": "newton(z^3 + p, z)"
      },
      "mandelinit"
      : {
      "type": "expr",
      "value": "c"
      }
      }
      },
      {
      "title": "Newton Set of Power 4",
      "icon": "newton4.png",
      "description": "Newton of z^4 - 6 * z^2 - 2 p z + p",
      "data": {
      "function": {
      "type": "expr",
      "value": "newton(z^4 - 6 * z^2 - 2 p z + p, z)"
      },
      "mandelinit"
      : {
      "type": "expr",
      "value": "-1"
      }
      }
      },
      {
      "title": "Newton Set of Sine Hyperbolicus",
      "icon": "newtonsinh.png",
      "description": "Newton of sinh z + p",
      "data": {
      "function": {
      "type": "expr",
      "value": "newton(sinh z + p, z)"
      },
      "mandelinit"
      : {
      "type": "expr",
      "value": "0"
      }
      }
      },
      {
      "title": "Nova Fractal of Power 3",
      "icon": "nova3.png",
      "description": "Variation of Newton Fractal",
      "data": {
      "function": {
      "type": "expr",
      "value": "newton(z^3 - 1, z) + p"
      },
      "mandelinit"
      : {
      "type": "expr",
      "value": "1"
      }
      }
      },
      {
      "title": "Generic Nova Fractal",
      "icon": "nova34.png",
      "description": "",
      "data": {
      "function": {
      "type": "expr",
      "value": "z - R (z^power - 1) / derive(z^4 - 1, z) + p"
      },
      "mandelinit"
      : {
      "type": "expr",
      "value": "0"
      },
      "R"
      : {
      "type": "expr",
      "value": "3"
      },
            "power"
      : {
      "type": "expr",
      "value": "4"
      }

      }
      },
      {
      "title": "Curvature Inequality",
      "icon": "curvature.png",
      "description": "Branching Addend",
      "data": {
      "addend": {
      "type": "expr",
      "value": "arcnorm((znext - z) / (z - zlast))"
      },
      "mandelinit"
      : {
      "type": "expr",
      "value": "0"
      }
      }
      },

// cursor
      {
      "title": "",
      "icon": ".png",
      "description": "",
      "data": {
      "function": {
      "type": "expr",
      "value": ""
      },
      "mandelinit"
      : {
      "type": "expr",
      "value": "0"
      }
      }
      },
    [
      "Triange Inequality", "triangleinequality.png", "Branching Addend",
      {
      "data": "addend"
      :
      [
      "expr", "{ var t1 = rad z ^ max_power, t2 = rad p, M = abs(t1 - t2), m = t1 + t2; (rad znext - m) / (M - m) }")
      ]
      ,
      {
      "title": "",
      "icon": ".png",
      "description": "",
      "data": {
      "function": {
      "type": "expr",
      "value": ""
      },
      "mandelinit"
      : {
      "type": "expr",
      "value": "0"
      }
      }
      },
    [
      "Gaussian Integer Min", "gaussianintmin.png", "Minimum distance to a gaussian integer (fold)",
      {
      "data": "foldinit"
      : [
      "expr", "bailout")
      "foldfn": [
      "expr", "min(dist(znext, floor(znext + 0.5:0.5)), foldvalue)")
      "bailoutvalue": [
      "expr", "foldvalue.x")
      "lakevalue":
      [
      "expr", "foldvalue.x")
      ]
      ,
      {
      "title": "",
      "icon": ".png",
      "description": "",
      "data": {
      "function": {
      "type": "expr",
      "value": ""
      },
      "mandelinit"
      : {
      "type": "expr",
      "value": "0"
      }
      }
      },
    [
      "Gaussian Integer Max", "gaussianintmax.png", "Maximum distance to a gaussian integer (fold)",
      {
      "data": "foldinit"
      : [
      "expr", "0")
      "foldfn": [
      "expr", "max(dist(znext, floor(znext + 0.5:0.5)), foldvalue)")
      "bailoutvalue": [
      "expr", "foldvalue.x")
      "lakevalue":
      [
      "expr", "foldvalue.x")
      ]
      ,
      {
      "title": "",
      "icon": ".png",
      "description": "",
      "data": {
      "function": {
      "type": "expr",
      "value": ""
      },
      "mandelinit"
      : {
      "type": "expr",
      "value": "0"
      }
      }
      },
    [
      "Gaussian Integer Mixed", "gaussianinttwofold.png", "Minimum (bailout) and maximum (lake) distance to a gaussian integer (two-fold)",
      {
      "data": "foldinit"
      : [
      "expr", "bailout")
      "foldfn": [
      "expr", "min(dist(znext, floor(znext + 0.5:0.5)), foldvalue)")
      "foldinit2": [
      "expr", "0")
      "foldfn2":
      [
      "expr", "max(dist(znext, floor(znext + 0.5:0.5)), foldvalue2)")
      ]
      ,
      {
      "title": "",
      "icon": ".png",
      "description": "",
      "data": {
      "function": {
      "type": "expr",
      "value": ""
      },
      "mandelinit"
      : {
      "type": "expr",
      "value": "0"
      }
      }
      },
    [
      "Distance Estimation (Mandelbrot)", "distance_estimation.png", "Distance estimation for the mandelbrot set (fold)",
      {
      "data": "foldfn"
      : [
      "expr", "2 znext foldvalue + 1")
      "bailoutvalue":
      [
      "expr", "rad znext / rad foldvalue / 2 * log rad znext")
      ]
      ,
      {
      "title": "",
      "icon": ".png",
      "description": "",
      "data": {
      "function": {
      "type": "expr",
      "value": ""
      },
      "mandelinit"
      : {
      "type": "expr",
      "value": "0"
      }
      }
      },
    [
      "Exponential Smoothing (Bailout and Lake)", "expsmooth.png", "Exponential Smoothing for bailout and lake (fold)",
      {
      "data": "foldfn"
      : [
      "expr", "/cosh(rad znext + /dist(znext, z)) + foldvalue")
      "bailoutvalue": [
      "expr", "log(E^2 + foldvalue.x)")
      "lakevalue":
      [
      "expr", "log(1 + foldvalue.x)")
      ]
      ,
      {
      "title": "",
      "icon": ".png",
      "description": "",
      "data": {
      "function": {
      "type": "expr",
      "value": ""
      },
      "mandelinit"
      : {
      "type": "expr",
      "value": "0"
      }
      }
      },
    [
      "Exponential Smoothing (Bailout)", "expsmoothbailout.png", "Exponential Smoothing for bailout (fold)",
      {
      "data": "foldfn"
      : [
      "expr", "/cosh rad znext + foldvalue")
      "bailoutvalue":
      [
      "expr", "log(E^2 + foldvalue.x)")
      ]
      ,
      {
      "title": "",
      "icon": ".png",
      "description": "",
      "data": {
      "function": {
      "type": "expr",
      "value": ""
      },
      "mandelinit"
      : {
      "type": "expr",
      "value": "0"
      }
      }
      },
    [
      "Exponential Smoothing (Lake)", "expsmoothlake.png", "Exponential Smoothing for lake",
      {
      "data": "foldfn"
      : [
      "expr", "/cosh(/dist(znext, z)) + foldvalue")
      "lakevalue":
      [
      "expr", "log(1 + foldvalue.x)")
      ]
      ,
      {
      "title": "",
      "icon": ".png",
      "description": "",
      "data": {
      "function": {
      "type": "expr",
      "value": ""
      },
      "mandelinit"
      : {
      "type": "expr",
      "value": "0"
      }
      }
      },
    [
      "Exponential Smoothing (Two Fold)", "expsmoothtwofold.png", "Exponential Smoothing for bailout (first fold) and lake (second fold)",
      {
      "data": "foldfn"
      : [
      "expr", "/cosh rad znext + foldvalue")
      "bailoutvalue": [
      "expr", "log(E^2 + foldvalue.x)")
      "foldfn2": [
      "expr", "/cosh(/dist(znext, z)) + foldvalue2")
      "lakevalue":
      [
      "expr", "log(1 + foldvalue2.x)")
      ]
      ,
      {
      "title": "",
      "icon": ".png",
      "description": "",
      "data": {
      "function": {
      "type": "expr",
      "value": ""
      },
      "mandelinit"
      : {
      "type": "expr",
      "value": "0"
      }
      }
      },
    [
      "Smooth Drawing (Lake)", "smoothlake.png", "Smooth drawing for the lake based on atan (fold)",
      {
      "data": "foldfn"
      : [
      "expr", "dist(znext, z) + foldvalue")
      "lakevalue": [
      "expr", "1.3 atan foldvalue.x / PI"))
      );

      {
      "title": ""
      ,
      "icon": ".png",
      "description": "",
      "data"
      : {
      "function": {
      "type": "expr",
      "value"
      : ""
      },
      "mandelinit": {
      "type": "expr"
      ,
      "value": "0"
      }
      }
      },
    [
      "Fold-Branching (Bailout and Lake)", "foldbranching.png", "Branching for fold for bailout and lake (fold)",
      {
      "data": "foldfn"
      : [
      "expr", "(0.5 + 0.5 cos 6 arc (z - znext)) / (12 + rad znext + /dist(znext, z)) + foldvalue")
      "bailoutvalue": [
      "expr", "log(1 + foldvalue.x)")
      "lakevalue":
      [
      "expr", "log(1 + foldvalue.x)")
      ]
      ,
      {
      "title": "",
      "icon": ".png",
      "description": "",
      "data": {
      "function": {
      "type": "expr",
      "value": ""
      },
      "mandelinit"
      : {
      "type": "expr",
      "value": "0"
      }
      }
      },
    [
      "Fold-Branching (Bailout)", "foldbranchingbailout.png", "Branching for fold for bailout (fold)",
      {
      "data": "foldfn"
      : [
      "expr", "(0.5 + 0.5 cos 6 arc znext) / (12 + rad znext) + foldvalue")
      "bailoutvalue":
      [
      "expr", "log(1 + foldvalue.x)")
      ]
      ,
      {
      "title": "",
      "icon": ".png",
      "description": "",
      "data": {
      "function": {
      "type": "expr",
      "value": ""
      },
      "mandelinit"
      : {
      "type": "expr",
      "value": "0"
      }
      }
      },
    [
      "Fold-Geometry Pattern (Bailout)", "foldgeometrybailout.png", "Branching for fold for bailout (fold)",
      {
      "data": "foldfn"
      : [
      "expr", "/line(0:0, 1:0, znext) + foldvalue")
      "bailoutvalue":
      [
      "expr", "log(1 + foldvalue.x)")
      ]
      ,
      {
      "title": "",
      "icon": ".png",
      "description": "",
      "data": {
      "function": {
      "type": "expr",
      "value": ""
      },
      "mandelinit"
      : {
      "type": "expr",
      "value": "0"
      }
      }
      },
    [
      "Fold-Branching (Lake)", "foldbranchinglake.png", "Branching for fold for lake (fold)",
      {
      "data": "foldfn"
      : [
      "expr", "(0.5 + 0.5 cos 6 arc(z - znext)) / (12 + /dist(znext, z)) + foldvalue")
      "lakevalue":
      [
      "expr", "log(1 + foldvalue.x)")
      ]
      ,
      {
      "title": "",
      "icon": ".png",
      "description": "",
      "data": {
      "function": {
      "type": "expr",
      "value": ""
      },
      "mandelinit"
      : {
      "type": "expr",
      "value": "0"
      }
      }
      },
    [
      "Fold-Branching Alternative (Lake)", "foldbranchinglake2.png", "Branching based on atan for fold for lake (fold)",
      {
      "data": "foldfn"
      : [
      "expr", "(0.5 + 0.5 cos 4 arc(z - znext)) * (1 - 2 atan(12 + /dist(znext, z)) / PI) + foldvalue")
      "lakevalue":
      [
      "expr", "log(1 + foldvalue.x)")
      ]
      ,
      {
      "title": "",
      "icon": ".png",
      "description": "",
      "data": {
      "function": {
      "type": "expr",
      "value": ""
      },
      "mandelinit"
      : {
      "type": "expr",
      "value": "0"
      }
      }
      },
    [
      "Fold-Geometry Pattern (Lake)", "foldgeometrylake.png", "Branching for fold for bailout (fold)",
      {
      "data": "foldfn"
      : [
      "expr", "/line(0:0, 1:0, /(znext - z)) + foldvalue")
      "lakevalue":
      [
      "expr", "log(1 + foldvalue.x)")
      ]
      ,
      {
      "title": "",
      "icon": ".png",
      "description": "",
      "data": {
      "function": {
      "type": "expr",
      "value": ""
      },
      "mandelinit"
      : {
      "type": "expr",
      "value": "0"
      }
      }
      },
    [
      "Fold-Branching (Two Fold)", "foldbranchingtwofold.png", "Branching for bailout (first fold) and lake (second fold) (two fold)",
      {
      "data": "foldfn"
      : [
      "expr", "(0.5 + 0.5 cos 6 arc znext) / (12 + rad znext) + foldvalue")
      "foldfn2": [
      "expr", "(0.5 + 0.5 cos 6 arc(z - znext)) / (12 + /dist(znext, z)) + foldvalue2")
      "bailoutvalue": [
      "expr", "log(1 + foldvalue.x)")
      "lakevalue":
      [
      "expr", "log(1 + foldvalue2.x)")
      ]
      ,
      {
      "title": "",
      "icon": ".png",
      "description": "",
      "data": {
      "function": {
      "type": "expr",
      "value": ""
      },
      "mandelinit"
      : {
      "type": "expr",
      "value": "0"
      }
      }
      },
    [
      "Exponential Smoothing and Branching (Two Fold)", "twofoldexpsmoothbranch.png", "Combination of exponential smoothing and branching (two fold)",
      {
      "data": "foldfn"
      : [
      "expr", "/cosh(rad znext + /dist(znext, z)) + foldvalue")
      "bailoutvalue": [
      "expr", "log(E^2 + foldvalue.x + foldvalue2.x)")
      "foldfn2": [
      "expr", "(0.5 + 0.5 cos 6 arc (z - znext)) / (12 + rad znext + /dist(znext, z)) + foldvalue2")
      "lakevalue": [
      "expr", "log(1 + foldvalue.x + foldvalue2.x)")
      "bailouttransfer": [
      "expr", "log(1 + foldvalue2.x) : value")
      "laketransfer":
      [
      "expr", "log(1 + foldvalue2.x) : value")
      ]
      ,
      // Next: Orbit Traps
      {
      "title": "",
      "icon": ".png",
      "description": "",
      "data": {
      "function": {
      "type": "expr",
      "value": ""
      }
      }
      }
      ,
    [
      "Cross Trap", "crosstrap.png", "Orbit Trap of a centered cross",
      {
      "data": "trapfn"
      :
      [
      "expr", "min(line(0:0, 1:0, znext), line(0:0, 0:1, znext))")
      ]
      ,
      {
      "title": "",
      "icon": ".png",
      "description": "",
      "data": {
      "function": {
      "type": "expr",
      "value": ""
      }
      }
      }
      ,
    [
      "Two Boxes Trap", "twoboxestrap.png", "Orbit Trap of two boxes",
      {
      "data": "trapfn"
      :
      [
      "expr", "min(box(-2:-2, 0.5:0.5, znext), box(2:2, -0.5:-0.5, znext))")
      ]
      ,
      {
      "title": "",
      "icon": ".png",
      "description": "",
      "data": {
      "function": {
      "type": "expr",
      "value": ""
      }
      }
      }
      ,
    [
      "Steiner Circles Trap", "steinertrap.png", "Orbit Trap of 6 Steiner Circles",
      {
      "data": "trapfn": [
      "expr", "min(circle(0:0, 3, znext), circle(-2:0, 1, znext), circle(2:0, 1, znext), circle(-1:-1.73205, 1, znext), circle(-1:1.73205, 1, znext), circle(1:-1.73205, 1, znext), circle(1:1.73205, 1, znext))")
      ],
      
      
      
      {
      "title": "Min/Max Neighbors",
      "icon": "minmaxneighbor.png",
      "description": "Orbit trap determining the distance of neighbors in the orbit",
      "data": {
      "trapfn": {
      "type": "expr",
      "value": "dist(znext, z)"
      }
      }
      },
      {
      "title": "Min/Max Gaussian Integer",
      "icon": "minmaxgaussianint.png",
      "description": "Orbit trap determining the distance to the next gaussian integer",
      "data": {
      "trapfn": {
      "type": "expr",
      "value": "dist(znext, floor(znext + 0.5:0.5))"
      }
      }
      },
      {
      "title": "BA-Lyapunov Fractal",
      "icon": ".png",
      "description": "Edge of BA-Lyapunov Fractal",
      "data": {
      "Scale": {
      "type": "scale",
      "value": ["1", "0", "0", "-1", "3", "3"]
      },
      "lyastring": {
      "type": "expr",
      "value": "[b,a]"
      }
      }
      },
      {
      "title": "BBABA-Lyapunov Fractal",
      "icon": "lyapunovbbaba.png",
      "description": "Edge of BBABA-Lyapunov Fractal",
      "data": {
      "Scale": {
      "type": "scale",
      "value": ["-1", "0", "0", "-1", "3", "3"]
      },
      "lyastring": {
      "type": "expr",
      "value"
      : "[b,b,a,b,a]"
      }
      }
      },
      {
      "title": "Zirkony Zity"
      ,
      "icon": "zirkony.png",
      "description": "Part of Lyapunov fractal called Zirkony Zity",
      "data": {
      "Scale": {
      "type": "scale",
      "value"
      :
      ["0.45", "0", "0", "-0.3", "3.05", "3.7"]
      }
      "lyastring": {
      "type": "expr",
      "value":
      "[a,a,a,a,a,a,b,b,b,b,b,b]"
      }
      }
      },
      {
      "title": "Domain Coloring",
      "icon": "domain.png",
      "description": "Domain Coloring for Complex Functions",
      "data":
      {
      "transfer": {
      "type": "expr",
      "value":
      "arcnorm z : (0.6 fract (log rad z / log 2) + 0.0667)"
    }
    }
    }
    }
